# PinkPlayEvo SWR - Complete Stack
# Moduł Świadomego Wnioskowania Resztkowego v2.0 Production

version: '3.8'

services:
  # Main PinkPlayEvo SWR Service
  pinkplay-swr:
    build:
      context: .
      dockerfile: Dockerfile.swr
    container_name: pinkplay-swr-main
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - SWR_LOG_LEVEL=info
      - SWR_TIMEOUT=30000
      - SWR_MAX_BATCH_SIZE=10
      - PYTHONPATH=/app/core:/app
    volumes:
      - ./logs:/app/logs
      - ./data/analytics:/app/data/analytics
      - swr_cache:/app/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pinkplay-swr.rule=Host(`swr.pinkplayevo.com`)"
      - "traefik.http.services.pinkplay-swr.loadbalancer.server.port=3000"
    networks:
      - swr_network

  # Redis for caching SWR results
  redis:
    image: redis:7-alpine
    container_name: pinkplay-swr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - swr_network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: pinkplay-swr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - pinkplay-swr
    restart: unless-stopped
    networks:
      - swr_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    container_name: pinkplay-swr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - swr_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana
    container_name: pinkplay-swr-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=swr_admin_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - swr_network

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: pinkplay-swr-fluentd
    ports:
      - "24224:24224"
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/app/logs:ro
      - fluentd_logs:/var/log/fluentd
    restart: unless-stopped
    networks:
      - swr_network

volumes:
  swr_cache:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local

networks:
  swr_network:
    driver: bridge
    name: pinkplay_swr_network